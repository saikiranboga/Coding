/*
TASK: submarines
LANG: C++
*/
#include <stdio.h>
#include <iostream>
#include <string.h>

using namespace std;

const int INF = 1000100;

int n, m;
int d[1 << 20], maxDepth = 0;
int tree[1 << 23];
int leaves = 1;

void read()
{
    scanf("%d %d", &n, &m);
    for(int i = 1; i <= n; i ++)
    {
        scanf("%d", &d[i]);
        if(maxDepth < d[i])
            maxDepth = d[i];
    }
}

void query20()
{
    int cnt[1024];
    memset(cnt, 0, sizeof(cnt));
    for(int i = 1; i <= n; i ++)
        for(int j = i + 1; j <= n; j ++)
            if(d[i] < d[j])
            {
                cnt[j] ++;
                break;
            }
    int x = 0;
    for(int i = 1; i <= n; i ++)
        if(x < cnt[i])
            x = cnt[i];
    printf("%d\n", x);
}

void solve20()
{
    int cmd;
    for(int i = 0; i < m; i ++)
    {
        scanf("%d", &cmd);
        if(cmd != 0) swap(d[cmd], d[cmd + 1]);
        else query20();
    }
}

void update(int l, int r, int val)
{
    l += leaves;
    r += leaves;
    
    while(l)
    {
        tree[l] = min(tree[l], val);
        l >>= 1;
        tree[r] = min(tree[r], val);
        r >>= 1;
    }
}

int rmq(int l, int r)
{    
    l += leaves;
    r += leaves;
    
    int ret = min(tree[l], tree[r]);
    
    while(l != r)
    {
        if(!(l & 1)) ret = min(ret, tree[l + 1]);
        if(r & 1) ret = min(ret, tree[r - 1]);
        
        l >>= 1;
        r >>= 1;
    }
    return ret;
}

void doit()
{
    for(int i = 1; i < 2 * leaves; i ++)
        tree[i] = INF;
    
    int cnt[1 << 20];
    memset(cnt, 0, sizeof(cnt));
    
    for(int i = n; i >= 1; i --)
    {
        int y = rmq(d[i] + 1, maxDepth + 1);
        if(y != INF) cnt[y] ++;
        update(d[i], maxDepth, i);
    }
    
    int ans = 0;
    for(int i = 1; i <= n; i ++)
        if(ans < cnt[i])
            ans = cnt[i];
    
    printf("%d\n", ans);
}

void solve50()
{
    while(leaves <= maxDepth) leaves <<= 1;
    
    int cmd;
    for(int i = 0; i < m; i ++)
    {
        scanf("%d", &cmd);
        if(cmd != 0) swap(d[cmd], d[cmd + 1]);
        else doit();
    }
}

int main()
{
    read();
    if(n <= 1000 && m <= 100)
        solve20();
    else
        solve50();

    return 0;
}
