program shablon;

{$MODE OBJFPC}{$H+}
{$COperators ON}

Uses SysUtils;

const nmax = 1000;
      imax = 100;
      tmax = 10;
      eps = 0.0000001;

type tpoint = record
         x, y : extended;
     end;
     tvector = tpoint;

var n, k, i, j, t : longint;
    m : tpoint;
    dog, sh : array[1 .. nmax] of tpoint;
    sumold, sum, l : extended;
    vect : tvector;
    dvect : array[1 .. 4] of tvector;

operator + (a, b : tvector) : tvector;
begin
    result.x := a.x + b.x;
    result.y := a.y + b.y;
end;

operator * (x : extended; a : tvector) : tvector;
begin
    result.x := a.x * x;
    result.y := a.y * x;
end;

operator - (a, b : tvector) : tvector;
begin
    result.x := a.x - b.x;
    result.y := a.y - b.y;
end;

procedure pinit;
begin
    assign(input, 'input.txt');
    reset(input);
    assign(output, 'output.txt');
    rewrite(output);
 end;

procedure pout;
begin
    close(input);
    close(output);
end;

function ro(a, b : tpoint) : extended;
begin
    result := sqrt(sqr(b.y - a.y) + sqr(b.x - a.x));
end;

function getsum : extended;
var i, j : longint;
    sum, sc, d : extended;
begin
    sum := 0;
    for i := 1 to n do begin
        sc := maxint;
        for j := 1 to k do begin
            d := ro(sh[i], dog[j]);
            if d < sc then begin
                sc := d;
            end;
        end;
        sum += sc;
    end;
   result := sum;
end;

function getvect : tvector;
begin
    result.x := random(trunc(m.x)) + random(1000001)/1000000;
    result.y := random(trunc(m.y)) + random(1000001)/1000000;
end;

begin
   // pinit;
    randomize;
    read(n, k);
    m.x := 0;
    m.y := 0;

    dvect[1].x := 0;
    dvect[1].y := 1;
    dvect[2].x := 1;
    dvect[2].y := 0;
    dvect[3].x := 0;
    dvect[3].y := -1;
    dvect[4].x := -1;
    dvect[4].y := 0;
    for i := 1 to n do begin
        read(sh[i].x, sh[i].y);
        if sh[i].x > m.x then begin
            m.x := sh[i].x;
        end;
        if sh[i].y > m.y then begin
            m.y := sh[i].y;
        end;
    end;

    for i := 1 to k do begin
        dog[i].x := random(trunc(m.x) + 1);
        dog[i].y := random(trunc(m.y) + 1);
    end;
    sum := getsum;
    for i := 1 to imax do begin
        j := random(k) + 1;
        l := sqrt(sqr(m.x) + sqr(m.y));

        while l > eps do begin
        for t := 1 to 4 do begin
            vect := l * dvect[t] ;
            dog[j] := dog[j] + vect;
            if (dog[j].x <= m.x) and (dog[j].y <= m.y) and (dog[j].x >= 0) and (dog[j].y >=  0) then begin
            sumold := sum;
            sum := getsum;
            if sum > sumold then begin
                sum := sumold;
                dog[j] := dog[j] - vect;
            end;
            end
            else begin
                dog[j] := dog[j] - vect;
            end;
        end;
        l /= 2;
        end;
    end;
    for i := 1 to k do begin
        writeln(dog[i].x :0 :6, ' ', dog[i].y :0 :6);
    end;
  //  pout;
end.
