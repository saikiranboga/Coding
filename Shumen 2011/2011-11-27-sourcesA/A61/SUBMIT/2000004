#include <iostream>
#include <map>
#include <set>
#include <vector>
#include <cmath>
#include <string>
#include <string.h>
#include <algorithm>
#include <queue>

using namespace std;

const int MAXN=1000000;

int N,Q;
int d[MAXN];
int nxt[MAXN];
int used[MAXN];
vector<int> prv[MAXN];

int main(){
    //freopen("submarines.in","r",stdin);
    scanf("%d%d",&N,&Q);
    for(int i=0; i<N; i++){
        scanf("%d",&d[i]);
    }
    memset(nxt,-1,sizeof(nxt));
    for(int i=0; i<N; i++){
        for(int j=i+1; j<N; j++){
            if(d[j]>d[i]){
                nxt[i]=j;
                break;
            }
        }
    }
    int task;
    for(int i=0; i<Q; i++){
        scanf("%d",&task);
        int ans=0;
        if(task==0){
            ans=0;
            memset(used,0,sizeof(used));
            for(int j=0; j<N; j++){
                if(nxt[j]==-1)
                    continue;
                used[nxt[j]]++;
                if(ans<used[nxt[j]])
                    ans=used[nxt[j]];
            }
            printf("%d\n",ans);
        }
        else{
            swap(d[task-1],d[task]);
            /*for(int j=0; j<task-1; j++){
                if(nxt[j]==task-1){
                    if(d[task-1]<=d[j]){
                        nxt[j]=task;
                    }
                }
            }
            for(int j=task; j<N; j++){
                if(d[j]>d[task-1]){
                    nxt[task-1]=j;
                    break;
                }
            }
            for(int j=task+1; j<N; j++){
                if(d[j]>d[task]){
                    nxt[task]=j;
                }
            }*/
            memset(nxt,-1,sizeof(nxt));
            for(int j=0; j<N; j++){
                for(int k=j+1; k<N; k++){
                    if(d[k]>d[j]){
                        nxt[j]=k;
                        break;
                    }
                }
            }
        }
    }
	return 0;
}