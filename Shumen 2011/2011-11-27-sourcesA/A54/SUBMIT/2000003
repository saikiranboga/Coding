#include <cstdio>
#include <cstring>

int max( int a, int b )
{
	if ( a > b ) return a;
	return b;
}

int min( int a, int b )
{
	if ( a < b ) return a;
	return b;
}

int n, m, q;
int t[1024][1024];
int sol[1024][1024];
int h[1024][1024];
int le[1024][1024], ri[1024][1024];

int main()
{
	int i, j, k;
	int row, mdep;
	
	scanf( "%d %d", &n, &m );
	for ( i = 1; i <= n; i++ )
	{
		for ( j = 1; j <= m; j++ )
		{
			scanf( "%d", &t[i][j] );
		}
	}
	
	memset( h, 0, sizeof( h ) );
	memset( le, 0, sizeof( le ) );
	memset( ri, 0, sizeof( ri ) );
	memset( sol, 0, sizeof( sol ) );
	
	for ( i = n; i > 0; i-- )
	{
		for ( j = 1; j <= m; j++ )
		{
			if ( t[i][j] == 0 )
				h[i][j] = h[i+1][j] + 1;
			else h[i][j] = 0;
		}
	}
	
	for ( i = 1; i <= n; i++ )
	{
		for ( j = 1; j <= m; j++ )
		{
			if ( h[i][j-1] >= h[i][j] )
				le[i][j] = le[i][j-1] + 1;
			else le[i][j] = 0;
		}
		for ( j = m; j > 0; j-- )
		{
			if ( h[i][j+1] >= h[i][j] )
				ri[i][j] = ri[i][j] + 1;
			else ri[i][j] = 0;
		}
	}
	
	for ( row = n; row > 0; row-- )
	{
		for ( mdep = 1; mdep + row <= n+1; mdep++ )
		{
			sol[row][mdep] = sol[row+1][mdep-1];
			for ( j = 1; j <= m; )
			{
				k = 0;
				while ( ( h[row][j] >= mdep ) && ( j <= m ) )
				{
					k += mdep;
					j++;
				}
				sol[row][mdep] = max( sol[row][mdep], k );
				if ( j <= m )
				{
					sol[row][mdep] = max( sol[row][mdep], h[row][j]*(le[row][j]+ri[row][j]-1) );
				}
				j++;
			}
		}
	}
	
	scanf( "%d", &q );
	for ( i = 1; i <= q; i++ )
	{
		scanf( "%d %d", &j, &k );
		printf( "%d\n", sol[j][k-j+1] );
	}
	return 0;
}
