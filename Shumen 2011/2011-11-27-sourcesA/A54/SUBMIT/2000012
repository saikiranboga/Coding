#include <cstdio>
#include <algorithm>
#include <cmath>
#include <vector>
using namespace std;

typedef pair<double,double> pdd;
int n, k;
pdd p[1024];

double dan1 = 0, dan2 = 0;

double dg[1024];

vector<pdd> vp1, vp2;

double dist( pdd a, pdd b )
{
	return sqrt( (a.first-b.first)*(a.first-b.first) + (a.second-b.second)*(a.second-b.second ) );
}

int main()
{
	int i, j, r;
	double sx, sy;
	scanf( "%d %d", &n, &k );
	for ( i = 1; i <= n; i++ )
	{
		scanf( "%lf %lf", &p[i].first, &p[i].second );
	}
	sort( p + 1, p + n + 1 );
	sx = 0; sy = 0;
	r = n/k;
	j = 0;
	for ( i = 1, j = 1; i <= n; i++, j++ )
	{
		sx = sx + p[i].first;
		sy = sy + p[i].second;
		if ( j == r )
		{
//			printf( "%.6lf %.6lf\n", sx/r, sy/r );
			vp1.push_back( make_pair( sx/r, sy/r ) );
			sx = 0;
			sy = 0;
			j = 0;
		}
	}
	
	double md = 0;
	dan1 = 0;
	for ( i = 1; i <= n; i++ )
	{
		md = 1e9;
		for ( j = 0; (unsigned)j < vp1.size(); j++ )
		{
			md = min( md, dist( p[i], vp1[j] ) );
		}
		dan1 = dan1 + md;
	}
	
	sx = 0; sy = 0;
	for ( i = 1; i <= n; i++ )
	{
		sx = sx + p[i].first;
		sy = sy + p[i].second;
	}
	
	vp2.push_back( make_pair( sx/n, sy/n ) );
	for ( i = 1; i <= n; i++ )
		dg[i] = dist( p[i], vp2[0] );
		
	k--;
	while ( k > 0 )
	{
		j = 1;
		for ( i = 1; i <= n; i++ )
		{
			if ( dg[i] > dg[j] )
				j = i;
		}
		vp2.push_back( p[j] );
		for ( i = 1; i <= n; i++ )
		{
			dg[i] = min( dg[i], dist( p[i], p[j] ) );
		}
		k--;
	}
	
	dan2 = 0;
	for ( i = 1; i <= n; i++ )
	{
		dan2 = dan2 + dg[i];
	}
	
	if ( dan2 < dan1 )
	{
		for ( i = 0; (unsigned)i < vp2.size(); i++ )
			printf( "%.6lf %.6lf\n", vp2[i].first, vp2[i].second );
	}
	else
	{
		for ( i = 0; (unsigned)i < vp1.size(); i++ )
			printf( "%.6lf %.6lf\n", vp1[i].first, vp1[i].second );
	}
	return 0;
}
