#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

typedef pair<int,int> pii;

int max( int a, int b )
{
	if ( a > b ) return a;
	return b;
}

int min( int a, int b )
{
	if ( a < b ) return a;
	return b;
}

int ste[] = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048};

int n, m, q;
int t[1024][1024];
int sol[1024][1024];
int h[1024][1024];
int le[1024][1024], ri[1024][1024];

int big[1024][1024];
int mx[1024][2048];

int mh[1024][2048];

void add( int row, int pos, int val )
{
	int p = pos+1023;
	mx[row][p] = max( mx[row][p], val );
	p = p / 2;
	while ( p > 0 )
	{
		mx[row][p] = max( mx[row][2*p], mx[row][2*p+1] );
		p = p / 2;
	}
}

int query( int row, int nd, int nl, int nr, int l, int r )
{
	if ( ( nl > r ) || ( l > nr ) ) return -1;
	if ( ( l <= nl ) && ( nr <= r ) ) return mx[row][nd];
	return max( query( row, 2*nd, nl, (nl+nr)/2, l, r ),
				query( row, 2*nd+1, (nl+nr)/2+1, nr, l, r ) );
}

int query( int row, int pos )
{
	return query( row, 1, 1, 1024, 1, pos );
}


/*int query( int row, int pos )
{
	int p = pos+1023, i, q;
	int res = mx[row][p];
	while ( p > 0 )
	{
		q = p / 2;
		if ( p == q*2 )
		{
			q--;
			for ( i = 0; i < 12; i++ )
				if ( ste[i] == q ) break;
		}
		p = q;
		if ( mx[row][p] > res ) res = mx[row][p];
	}
	return res;
}*/


void add2( int row, int pos, int val )
{
	int p = pos+1023;
	mh[row][p] = max( mh[row][p], val );
	p = p / 2;
	while ( p > 0 )
	{
		mh[row][p] = max( mh[row][2*p], mh[row][2*p+1] );
		p = p / 2;
	}
}

int query2( int row, int nd, int nl, int nr, int l, int r )
{
	if ( ( nl > r ) || ( l > nr ) ) return -1;
	if ( ( l <= nl ) && ( nr <= r ) ) return mh[row][nd];
	return max( query2( row, 2*nd, nl, (nl+nr)/2, l, r ),
				query2( row, 2*nd+1, (nl+nr)/2+1, nr, l, r ) );
}

int query2( int row, int pos )
{
	return query2( row, 1, 1, 1024, pos, 1024 );
}

int main()
{
	int i, j, k;
	int row, mdep;
	
	scanf( "%d %d", &n, &m );
	for ( i = 1; i <= n; i++ )
	{
		for ( j = 1; j <= m; j++ )
		{
			scanf( "%d", &t[i][j] );
		}
	}
	
	memset( h, 0, sizeof( h ) );
	memset( le, 0, sizeof( le ) );
	memset( ri, 0, sizeof( ri ) );
	memset( sol, 0, sizeof( sol ) );
	memset( big, 0, sizeof( big ) );
	memset( mx, 0, sizeof( mx ) );
	memset( mh, 0, sizeof( mh ) );
	
	for ( i = n; i > 0; i-- )
	{
		for ( j = 1; j <= m; j++ )
		{
			if ( t[i][j] == 0 )
				h[i][j] = h[i+1][j] + 1;
			else h[i][j] = 0;
		}
	}
	
	for ( i = 1; i <= n; i++ )
	{
		for ( j = 1; j <= m; j++ )
		{
			if ( h[i][j-1] >= h[i][j] )
				le[i][j] = le[i][j-1] + 1;
			else le[i][j] = 0;
		}
		for ( j = m; j > 0; j-- )
		{
			if ( h[i][j+1] >= h[i][j] )
				ri[i][j] = ri[i][j+1] + 1;
			else ri[i][j] = 0;
		}
		for ( j = 1; j <= m; j++ )
		{
//			add( i, h[i][j], h[i][j]*(le[i][j]+ri[i][j]+1) );
			mx[i][h[i][j]] = max( mx[i][h[i][j]],  h[i][j]*(le[i][j]+ri[i][j]+1) );
//			printf( "MX %d %d %d\n", i, h[i][j], h[i][j]*(le[i][j]+ri[i][j]+1) );
//			printf( "LR %d %d : %d %d %d __ %d\n", i, j, le[i][j], ri[i][j], h[i][j], (le[i][j]+ri[i][j]+1) );
//			add2( i, h[i][j], (le[i][j]+ri[i][j]+1) );
			mh[i][h[i][j]] = max( mh[i][h[i][j]], le[i][j]+ri[i][j]+1 );
//			if ( h[i][j] == 0 )	l[j] = make_pair( -(1e9), -(1e9) );
			//else
//				l[j] = make_pair( -(le[i][j]+ri[i][j]+1), 2*h[i][j]*(le[i][j]+ri[i][j]+1) );
		}
		//printf( "MX %d : ", i );
//		for ( j = 1; j <= m; j++ )
//		{
			//printf( "%d ", mx[i][j] );
		//}
		//printf( "\n" );
//		sort( l + 1, l + m + 1 );
		//addLines( i );
	}
	
	for ( i = 1; i <= n; i++ )
	{
		for ( j = 1; j <= m; j++ )
		{
			mx[i][j] = max( mx[i][j], mx[i][j-1] );
		}
		for ( j = m; j > 0; j-- )
		{
			mh[i][j] = max( mh[i][j], mh[i][j+1] );
		}
	}
	
	for ( row = n; row > 0; row-- )
	{
		for ( mdep = 1; mdep + row <= n+1; mdep++ )
		{
			sol[row][mdep] = sol[row+1][mdep-1];
			sol[row][mdep] = max( sol[row][mdep], mx[row][mdep] );
			sol[row][mdep] = max( sol[row][mdep], mdep*mh[row][mdep] );
//			sol[row][mdep] = max( sol[row][mdep], query( row, mdep ) );
			//sol[row][mdep] = max( sol[row][mdep], mdep*query2( row, mdep ) );
			//printf( "SOL %d %d __ %d : %d %d __ %d\n", row, mdep, sol[row][mdep], mdep*mh[row][mdep], mh[row][mdep], mx[row][mdep] );
/*			for ( j = 1; j <= m; )
			{
				k = 0;
				while ( ( h[row][j] >= mdep ) && ( j <= m ) )
				{
					k += mdep;
					j++;
				}
				sol[row][mdep] = max( sol[row][mdep], k );
				j++;
			}*/
		}
	}
	
	scanf( "%d", &q );
	for ( i = 1; i <= q; i++ )
	{
		scanf( "%d %d", &j, &k );
		printf( "%d\n", sol[j][k-j+1] );
	}
	return 0;
}
