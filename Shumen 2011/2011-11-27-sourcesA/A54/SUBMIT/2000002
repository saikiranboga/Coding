#include <cstdio>
#include <cstring>
#include <set>
using namespace std;

typedef pair<int,int> pii;

int n, m;
int ds;
int dep[1<<20];
int nex[1<<20];
pii st[1<<20];
int si;
int in[1<<20];
int mx[1<<21];
set<pii> it[1<<21];

set<int> s2;

int max( int a, int b )
{
	if ( a > b ) return a;
	return b;
}

void upd( int pos, int val )
{
	int p = pos+ds-1;
	mx[p] = val; p = p / 2;
	while ( p > 0 )
	{
		mx[p] = max( mx[2*p], mx[2*p+1] );
		p = p / 2;
	}
}

void rem( int pos, int val )
{
	int p = pos+ds-1;
	pii v = make_pair( pos, val );
	while ( p > 0 )
	{
		it[p].erase( v );
		p = p / 2;
	}
}

void add( int pos, int val )
{
	int p = pos+ds-1;
	pii v = make_pair( pos, val );
	while ( p > 0 )
	{
		it[p].insert( v );
		p = p / 2;
	}
}

int fin( int pos, int val )
{
	int p = pos+ds-1, q;
	pii v = make_pair( val, n+1 );
	set<pii>::iterator ite;
	while ( p > 0 )
	{
		ite = it[p].lower_bound( v );
		if ( ite != it[p].end() )
		{
//			printf( "FIND %d %d %d %d : %d\n", pos, val, (*ite).first, (*ite).second, p );
			return (*ite).second;
		}
		if ( s2.find( p ) != s2.end() ) return -1;
		q = p/2;
		if ( q*2+1 == p )
			p = q+1;
		else p = q;
	}
	return -1;
}

int main()
{
	int i, j;
	
	for ( i = 0; i <= 22; i++ )
	{
		s2.insert( (1<<i)-1 );
	}
	
	scanf( "%d %d", &n, &m );
	for ( i = 1; i <= n; i++ )
	{
		scanf( "%d", &dep[i] );
	}
	
	memset( mx, 0, sizeof( mx ) );
	memset( in, 0, sizeof( in ) );
	
	ds = (1<<20);
	int h = 1;
	while ( (n+ds-1)/h >= 1 )
	{
		for ( i = 1; i <= n; i++ )
		{
			it[(i+ds-1)/h].insert( make_pair( dep[i], i ) );
		}
		h = 2*h;
	}
	
	si = 0;
	for ( i = n; i > 0; i-- )
	{
		while ( ( dep[i] >= st[si].first ) && ( si > 0 ) )
			si--;
		if ( si == 0 )
			nex[i] = -1;
		else
		{
			nex[i] = st[si].second;
			in[nex[i]]++;
			upd( nex[i], in[nex[i]] );
		}
		st[++si] = make_pair( dep[i], i );
	}
	
	for ( i = 1; i <= m; i++ )
	{
		scanf( "%d", &j );
		if ( j == 0 )
		{
			printf( "%d\n", mx[1] );
			continue;
		}
		if ( dep[j] > dep[j+1] )
		{
			if ( ( nex[j+1] != -1 ) && ( nex[j+1] != nex[j] ) )
			{
				in[nex[j+1]]--;
				upd( nex[j+1], in[nex[j+1]] );
			}
			rem( j, dep[j] );
			rem( j, dep[j+1] );
			swap( dep[j], dep[j+1] );
			add( j, dep[j] );
			add( j, dep[j+1] );

			nex[j+1] = nex[j];
			nex[j] = j+1;
			in[j+1]++;
			upd( j+1, in[j+1] );
		}
		else if ( dep[j] < dep[j+1] )
		{
			in[j+1]--;
			upd( j+1, in[j+1] );

			rem( j, dep[j] );
			rem( j, dep[j+1] );
			swap( dep[j], dep[j+1] );
			add( j, dep[j] );
			add( j, dep[j+1] );
			
			//recalc nex[i+1];
			nex[j] = nex[j+1];
			nex[j+1] = fin( j+2, dep[j+1] );
			if ( nex[j+1] != -1 )
			{
				in[nex[j+1]]++;
				upd( nex[j+1], in[nex[j+1]] );
			}
		}
		
//		for ( int k = 1; k <= n; k++ )
		//{
//			printf( "__ %d %d %d\n", k, dep[k], nex[k] );
		//}
	}
	return 0;
}
