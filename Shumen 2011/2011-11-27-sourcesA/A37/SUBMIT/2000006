#include <cstdio>
#include <algorithm>

using namespace std;

#define maxn 1010

int n, i, j, k, nc, nr;
int t[maxn], a[maxn], b[maxn], dx[maxn], dy[maxn], sum[maxn];
pair<int, pair<int, int> > mc[maxn*maxn];
double sum1;

int tata(int nod)
{
    if(t[nod]==nod)
        return nod;

    int aux=tata(t[nod]);
    t[nod]=aux;
    return aux;
}

int main()
{
  //  freopen("clustering.in", "r", stdin);
  //  freopen("clustering.out", "w", stdout);

    scanf("%d%d", &n, &k);
    for(int i=1; i<=n; ++i)
    {
        t[i]=i;
        scanf("%d%d", &a[i], &b[i]);
    }

    nc=n;

    for(int i=1; i<=n; ++i)
        for(int j=1; j<i; ++j)
            mc[++nr]=make_pair((a[i]-a[j])*(a[i]-a[j])+(b[i]-b[j])*(b[i]-b[j]), make_pair(i, j));

    sort(mc+1, mc+nr+1);

    for(int i=1; i<=nr; ++i)
    {
        if(tata(mc[i].second.first)!=tata(mc[i].second.second))
        {
        //    printf("%d %d\n", mc[i].second.first, mc[i].second.second);
            t[tata(mc[i].second.first)]=tata(mc[i].second.second);
            nc--;
            if(nc==k)
                break;
        }
    }

    for(int i=1; i<=n; ++i)
    {
        int z=tata(i);

     //   printf("%d %d\n", i, z);
        dx[z]+=a[i];
        dy[z]+=b[i];
        sum[z]++;
    }

    for(int i=1; i<=n; ++i)
    {
        if(sum[i]==0)
            continue;
        printf("%.4lf %.4lf\n", 1.0*dx[i]/sum[i], 1.0*dy[i]/sum[i]);
    }

    return 0;
}
