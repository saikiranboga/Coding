#include <cstdio>
#include <cstring>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;


const int MAXN = 1 << 10;
const int MAXK = 1 << 7;

struct Point
{
    double x , y;

    Point () {}
    Point ( int _x , int _y )
    {
        x = (double)_x;
        y = (double)_y;
    }

    Point operator - ( const Point &t ) const
    {
        return Point ( x - t.x , y - t.y );
    }
    double len()
    {
        return hypot ( x , y );
    }
};

int n , k;

vector < Point > sx;
vector < Point > sy;

vector < Point > split[2][MAXK];

Point T;
vector < Point > gres;

double gans = 1e20;

int cmpy ( Point a , Point b )
{
    if ( a.y != b.y ) return a.y < b.y;
    return a.x < b.x;
}

int cmpx ( Point a , Point b )
{
    if ( a.x != b.x ) return a.x < b.x;
    return a.y < b.y;
}


void read()
{
    scanf ( "%d%d" , &n , &k );

    int i , x , y;
    for (i = 0; i < n; ++i)
    {
        scanf ( "%d%d" , &x , &y );
        sx.push_back ( Point ( x , y ) );
        sy.push_back ( Point ( x , y ) );
    }
}

int cross ( Point a , Point b , Point c )
{
    c = c - a;
    b = b - a;
    double res = b.x * c.y - b.y * c.x;
    if ( res < 0. ) return -1;
    if ( res > 0. ) return 1;
    return 0;
}

int cmpp ( Point a , Point b )
{
    int res = cross ( T , a , b );
    if ( res == 0 ) return 1;
    return (a - T).len() < (b - T).len();
}

void graham ( int id1 , int id2 )
{
    if ( (int)split[id1][id2].size() <= 3 ) return;
    vector < Point > conv;

    int lid = 0 , i;
    for (i = 0; i < (int)split[id1][id2].size(); ++i)
    {
        if ( (split[id1][id2][i].y < split[id1][id2][lid].y) ||
             (split[id1][id2][i].y == split[id1][id2][lid].y && split[id1][id2][i].x < split[id1][id2][lid].x ) )
        {
            lid = i;
        }
    }

    T = split[id1][id2][0];
    swap ( split[id1][id2][0] , split[id1][id2][lid] );
    sort ( split[id1][id2].begin() + 1 , split[id1][id2].end() , cmpp );

    conv.push_back ( split[id1][id2][0] );
    conv.push_back ( split[id1][id2][1] );

    for (i = 2; i < (int)split[id1][id2].size(); ++i)
    {
        while ( (int)conv.size() > 2 && cross ( conv[ conv.size() - 2 ] , conv[ conv.size() - 1 ] , split[id1][id2][i] ) < 0 )
            conv.pop_back();

        conv.push_back ( split[id1][id2][i] );
    }
    split[id1][id2] = conv;
}

void go ( int id , int maxid )
{
    vector < Point > res;
    double x = 0. , y = 0.;
    int i , j;
    for (i = 0; i < maxid; ++i)
    {
        x = 0.;
        y = 0.;

        for (j = 0; j < (int)split[id][i].size(); ++j)
        {
            x += split[id][i][j].x;
            y += split[id][i][j].y;
        }
        x /= (double)split[id][i].size();
        y /= (double)split[id][i].size();
        res.push_back ( Point ( x , y ) );
    }

    double mdist , tot = 0.;
    for (i = 0; i < n; ++i)
    {
        mdist = 1e20;
        for (j = 0; j < (int)res.size(); ++j)
        {
            mdist = min ( mdist , (sx[i] - res[j]).len() );
        }
        tot += mdist;
    }
    if ( tot < gans )
    {
        tot = gans;
        gres = res;
    }
}

void solve()
{
    sort ( sx.begin() , sx.end() , cmpx );
    sort ( sy.begin() , sy.end() , cmpy );

    int div = n / k;
    int i , maxid = -1;
    for (i = 0; i < n; ++i)
    {
        int id = min ( k - 1 , i / div );
        split[0][id].push_back ( sx[i] );
        split[1][id].push_back ( sy[i] );
    }


    for (i = 0; i < k; ++i)
    {
        graham ( 0 , i );
        graham ( 1 , i );
    }

    go ( 0 , k );
    go ( 1 , k );

    for (i = 0; i < (int)gres.size(); ++i)
        printf ( "%.6lf %.6lf\n" , gres[i].x , gres[i].y );
}

int main()
{
    read();
    solve();

    return 0;
}
