#include <cstdio>
#include <cstring>
#include <queue>
#include <utility>
#include <iostream>
#define MAXN (1000000 + 10)
#define MAXT (1 << 22)
using namespace std;

int n, q;
int h[MAXN];
int to[MAXN];
int ans[MAXN];
//int lastUpdate[MAXN];
int rmq[MAXT], ADD;

priority_queue< pair<int, int> > pq;

inline int myMax(const int &a, const int &b) { return (a > b)? a : b; }

inline void update(int pos) {
	int idx = pos+ADD;
	rmq[idx] = pos;
	while (idx != 1) {
		idx >>= 1;
		if (h[rmq[idx<<1]] > h[rmq[(idx<<1) + 1]]) {
			rmq[idx] = rmq[idx << 1];
		} else {
			rmq[idx] = rmq[(idx << 1) + 1];
		}
	}
}

int getMax(int from, int to) {
	int ans = myMax(h[from], h[to]);
	int l = from+ADD, r = to+ADD;
	while (l <= r) {
		ans = myMax(ans, myMax(h[rmq[l]], h[rmq[r]]));
		l = (l+1) >> 1;
		r = (r-1) >> 1;
	}
	return ans;
}

inline int can(int from, int to) {
	int height = getMax(from, to);
	//cout << height << " from " << from << ' ' << to << endl;
	return (height > h[from]);
}

int solve(int pos) {
	int l = pos, r = n+1, mid;
	//printf("in solve %d\n", pos);
	while (r-l > 1) {
		mid = (l+r)/2;
		if (can(pos, mid)) {
			r = mid;
		} else {
			l = mid;
		}
	}
	if (!can(pos, l+1)) return -1;
	return l+1;
}

inline void mySwap(int &a, int &b) { a = a^b; b = a^b; a = a^b; }

inline void go() {

	for (int step=0; step < q; ++step) {
		int type;
		scanf("%d", &type);

		if (!type) {
			int sol = ans[1];
			for (int i=1; i <= n; ++i)
				sol = myMax(sol, ans[i]);
			printf("%d\n", sol);
		} else {
			memset(ans, 0, sizeof(ans));
			memset(rmq, 0, sizeof(rmq));
			mySwap(h[type], h[type+1]);
			for (int i=n; i >= 1; --i) {
				int id = solve(i);
				//cout << i << " -> " << id << endl;

				if (id != -1) {
					ans[id] ++;
				}
				update(i);
			}
		}
	}
}

inline void getSet() {
	ADD = (1 << 20) - 1;

	for (int i=n; i >= 1; --i) {
		int id = solve(i);
		//cout << i << " -> " << id << endl;
		if (id != -1) {
			ans[id] ++;
		}
		update(i);
	}
}

inline void readY() {
	scanf("%d%d", &n, &q);
	for (int i=1; i <= n; ++i) {
		scanf("%d", &h[i]);
	}
}

int main() {
	readY();
	getSet();
	go();
	return 0;
}
