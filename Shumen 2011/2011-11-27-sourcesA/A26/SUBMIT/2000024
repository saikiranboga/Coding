#include <cstdio>
#include <algorithm>

using namespace std;

const int MAXN=1000010;
int n, m, command, max_signals_recieved=0, max_d;
struct sub
{
  int num, d;
};

int sig_rec[MAXN];
sub subs[MAXN];

void switch_em(int sn )
{
    swap(subs[sn], subs[sn+1]);
}

int find_signal_reciever(int cur_dep, int j)
{
    if(cur_dep < subs[j].d)
    {
        sig_rec[j]++;
        return 0;
    }
    return 1;
}

void signal()
{
    for(int i=1; i<=n; i++)
    {
        int j=i+1;
        int cur_depth=subs[i].d;
        bool not_found=1;
        if(max_d!=cur_depth)
        while(not_found)
        {
            not_found=find_signal_reciever(cur_depth, j);
            j++;
        }
        if(max_signals_recieved < sig_rec[i])
            max_signals_recieved = sig_rec[i];
        sig_rec[i]=0;
    }
    printf("%d\n", max_signals_recieved);
    max_signals_recieved=0;

}

void input_sol()
{
    scanf("%d%d", &n, &m);
    for (int i=1; i<=n; i++)
    {
        subs[i].num = i;
        scanf("%d", &subs[i].d);
        if(max_d < subs[i].d)
            max_d= subs[i].d;
    }
    for(int i=0; i<m; i++)
    {

        scanf("%d", &command);
        if (command > 0)
            switch_em(command);
    /*   printf("\n");
        for(int i=1; i<n; i++)
            printf("%d ", subs[i].d);
        printf("\n");
    */
    else
            signal();
    }


}

int main()
{
    input_sol();

    return 0;
}

