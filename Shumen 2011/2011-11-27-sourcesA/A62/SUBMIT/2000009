//Georgi Gaidarov
// No_ReSponSe
// Esenen shumen s katmi
// 26.11.2011

// Task : submarines
// pustite mu i dyrveta
#include <iostream>
#include <cstring>
#include <cmath>
#include <queue>
#include <stack>
#include <cstdlib>
#include <fstream>
#include <list>
#include <map>

using namespace std;

int a[1000000];
int n, r;
//int step[100]; // kletka otgovaria za  10 000 podvodnici
int sumup = 0;

int dvaiseTochki()
{
    list<int> sent;
    int maxed = 0;
    for(int i=0; i<n; i++)
    {
        int thisGot = 0;
        sent.push_back(a[i]);
        for(list<int>::iterator li = sent.begin(); li!=sent.end(); )
        {
            //cout<<"got here\n";
            if(a[i] > *li)
            {
                thisGot++;
                list<int>::iterator d = li;
                li++;
                sent.erase(d);
                //cout<<"got here\n";
                continue;
            }
            li++;
        }
        if(thisGot > maxed) maxed = thisGot;
    }
    return maxed;
}
void dvaiseTochkiSolve()
{
    for(int i=0; i<r; i++)
    {
        int rq;
        scanf("%d", &rq);
        if(!rq) cout<<dvaiseTochki()<<endl;
        else
        {   // do it like a prooooo00o0o0o0o0o
            a[rq-1] ^= a[rq];
            a[rq] ^= a[rq-1];
            a[rq-1] ^= a[rq];
        }
    }

    exit(0);
}


map<int, int> states[100000]; // 1 list = 10 000 submarines
// list[0] -> kato izlizame ot 99 kvi messages ostavat

void smiatai(int x)
{
    map<int, int> sent;
    int startpoint;
    startpoint = floor(x/10.0) * 10;
    if(startpoint)
        states[(int)(floor(x/10.0)-1)];


    int maxed = 0;
    for(int i=startpoint; i<n; i++)
    {
        int thisGot = 0;
        sent[a[i]]++;
        for(map<int, int>::iterator li = sent.begin(); li!=sent.end(); )
        {
            //cout<<"got here\n";
            if(a[i] > li->first)
            {
                thisGot+=li->second;
                sent[li->first] = 0;
                li++;
                //cout<<"got here\n";
                continue;
            }
            li++;
        }
        if(thisGot > sumup) sumup = thisGot;
        if((i+1)%100 == 0)
        {
            if(states[(int)((i+1)/10.0 - 1)] == sent ) return;
            states[(int)((i+1)/10.0 - 1)] = sent;
        }
    }
}


int main()
{
    //freopen("submarines.txt", "r", stdin);
    cin>>n>>r;
    for(int i=0; i<n; i++)
    scanf("%d", a+i);


    if(n<100001) dvaiseTochkiSolve();


    smiatai(0);
    for(int i=0; i<r; i++)
    {
        int rq;
        scanf("%d", &rq);
        if(!rq) cout<<dvaiseTochki()<<endl;
        else
        {   // do it like a prooooo00o0o0o0o0o
            a[rq-1] ^= a[rq];
            a[rq] ^= a[rq-1];
            a[rq-1] ^= a[rq];
            smiatai(rq-1);
        }
    }




    return 0;
}
