#include <cstdio>
#include <algorithm>
#include <cmath>
#include <cstring>

#define x first
#define y second

using namespace std;

const int maxN = 1010;
const int maxK = 1100;

const int dl[4] = {0, 1, 0, -1};
const int dc[4] = {1, 0, -1, 0};


int N, K;
pair <double, double> V[maxN], newP, candidate;
pair <double, double> S[maxK];
double dMin[maxN], copyD[maxN], cMin;

double dist(pair <double, double> A, pair <double, double> B) {
	return (sqrt((A.x - B.x) * (A.x - B.x) + (A.y - B.y) * (A.y - B.y)));
}

double totalCost(pair <double, double> P, int poz) {
	int i, j; 
	double cs = 0;
	
	pair <double, double> aux = S[poz];
	S[poz] = P;
	double total = 0;
	for (i = 1; i <= N; i++) {
		double curr = 10000000000.0;
		for (j = 1; j <= K; j++)
			if (dist(S[j], V[i]) < curr)
				curr = dist(S[j], V[i]);

		copyD[i] = curr;
		total += curr;
	}

	S[poz] = aux;
	return total;

}

int main() {
	int i, j, k;

//	freopen("data.in", "r", stdin);
//	freopen("data.out", "w", stdout);

	scanf("%d%d", &N, &K);
	for (i = 1; i <= N; i++) {
		scanf("%lf%lf", &V[i].x, &V[i].y);
		S[0].x = S[0].x + V[i].x;
		S[0].y = S[0].y + V[i].y;
	}

	S[0].x /= (1.0 * N);
	S[0].y /= (1.0 * N);

	for (i = 1; i <= K; i++)
		S[i] = S[0];

	for (i = 1; i <= N; i++) {
		dMin[i] = dist(V[i], S[0]);
		cMin += dMin[i];
	}

//	fprintf(stderr, "%lf\n", cMin);

	for (double step = 10000; step >= 0.01; step /= 2.0) {
		for (i = 1; i <= K; i++) {
			candidate = S[i];
			for (int d = 0; d < 4; d++) {
				newP.x = S[i].x + step * dl[d];
				newP.y = S[i].y + step * dc[d];
				double c = totalCost(newP, i);
//				fprintf(stderr, "%lf  -> %lf\n", step, c);
				if (c < cMin) {
					cMin = c;
					candidate = newP;
					memcpy(dMin, copyD, sizeof(dMin));
				}
			}

//			fprintf(stderr, "%lf\n", cMin);
			S[i] = candidate;
		}

//		fprintf(stderr, "%lf\n", cMin);
	}

	for (i = 1; i <= K; i++)
		printf("%lf %lf\n", S[i].x, S[i].y);

	double total = 0;
	for (i = 1; i <= N; i++) {
		double curr = 10000000000.0;
		for (j = 1; j <= K; j++)
			if (dist(S[j], V[i]) < curr)
				curr = dist(S[j], V[i]);
		total += curr;
	}

//	fprintf(stderr, "%lf\n", total);

	return 0;
}
