/**
TASK: standard
LANG: C++
*/
#include <cstdio>
#include <cstring>
#include <cassert>
#include <cctype>
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <ext/hash_map>
#include <queue>
#include <string>
#define foreach( el , c ) for( typeof((c).begin()) el = (c).begin() ; el != (c).end() ; el++ )
#if 0
#define eprintf( msg , ... ) fprintf( stderr , "line %d(%s): " msg "\n" , __LINE__ , __FUNCTION__ , ##__VA_ARGS__ )
#else
#define eprintf( ... ) 0
#endif

typedef long long ll;
typedef unsigned long long ull;

using namespace std;
using namespace __gnu_cxx;

const ll LLINF = 1LL << 60;
const int INF = 1 << 29;
const double EPS = 1e-9;

const int MAXN = 1 << 10;
const int MAXQ = 1 << 20;

struct el{
    int first, second;
    el( int first = -1 , int second = -1 ) : first( first ), second( second ) {}
};

int N, M, Q;
int m[MAXN][MAXN];
int query[MAXQ][2];
int dp[MAXN][MAXN];
int best[MAXN][MAXN];

el at[MAXN][MAXN]; /// the lower corner of the rectangle with upper at (x,y) ( maximized area )
int lastx[MAXN][MAXN]; /// offset to the last row ( up )
int lasty[MAXN][MAXN]; /// offset to the last col ( left )

void read(){
    scanf("%d %d", &N, &M);
    eprintf("Read %d %d", N, M);
    for( int i = 1 ; i <= N ; i++ ){
        for( int j = 1 ; j <= M ; j++ ){
            scanf("%d", &m[i][j]);
        }
    }
    scanf("%d", &Q);
    for( int i = 0 ; i < Q ; i++ ){
        scanf("%d %d", &query[i][0], &query[i][1]);
    }
}

int cool( int xi , int yi , int xj , int yj ){
    return dp[xi][yi] - dp[xi][yj-1] - dp[xj-1][yi] + dp[xj-1][yj-1] == 0;
}

inline int area( int x , int y ){
    return (x - at[x][y].first + 1) * (y - at[x][y].second + 1);
}

void calc(){
    for( int i = 0 ; i <= M ; i++ )
        lastx[0][i] = 1;
    for( int i = 0 ; i <= N ; i++ )
        lasty[i][0] = 1;
    for( int i = 1 ; i <= N ; i++ )
        for( int j = 1 ; j <= M ; j++ ){
            if( m[i][j] == 1 )
                lastx[i][j] = i + 1;
            else
                lastx[i][j] = lastx[i-1][j];
            
            eprintf("lastx[%d][%d] = %d", i, j, lastx[i][j]);
            
            if( m[i][j] == 1 )
                lasty[i][j] = j + 1;
            else
                lasty[i][j] = lasty[i][j-1];
            
            eprintf("lasty[%d][%d] = %d", i, j, lasty[i][j]);
        }
    
    for( int i = 1 ; i <= N ; i++ ){
        for( int j = 1 ; j <= M ; j++ ){
            if( m[i][j] == 1 )
                at[i][j] = el( N + 1 , -1 ); /// no such thing
            else{
                int a = at[i-1][j-1].first, b = at[i-1][j-1].second;
                a = max( a , lastx[i][j] );
                b = max( b , lasty[i][j] );
                at[i][j] = el( i , j );
                if( cool( i , j , a , b ) )
                    at[i][j] = el( a , b ); /// not yet maximized
                
                a = at[i][j-1].first, b = at[i][j-1].second;
                a = max( a , lastx[i][j] );
                b = max( b , lasty[i][j] );
                
                if( area( i , j ) < (i - a + 1) * (j - b + 1) )
                    at[i][j] = el( a , b );
                
                a = at[i-1][j].first, b = at[i-1][j].second;
                a = max( a , lastx[i][j] );
                b = max( b , lasty[i][j] );
                if( area( i , j ) < (i - a + 1) * (j - b + 1) )
                    at[i][j] = el( a , b );
                
                eprintf("at(%d,%d) = (%d,%d) -> %d", i, j, at[i][j].first, at[i][j].second, area(i,j));
            }
        }
    }
}

bool check( int r1 , int r2 , int ans ){
    int myans = -1;
    for( int i = r1 ; i <= r2 ; i++ ){
        for( int j = 1 ; j <= M ; j++ ){
            for( int l = i ; l <= r2 ; l++ ){
                for( int k = ( l == i ? j : 1 ) ; k <= M ; k++ ){
                    if( cool( l , k , i , j ) ) myans = max( myans , (l - i + 1) * (k - j + 1) );
                }
            }
        }
    }
    return myans == ans;
}

int get( int r1 , int r2 ){
    if( r1 > r2 )
        return -INF;
    int &self = best[r1][r2];
    
    if( self != -1 )
        return self;
    
    self = 0;
    
    for( int i = 1 ; i <= M ; i++ ){
        int a = at[r2][i].first, b = at[r2][i].second;
        a = max( a , r1 );
        self = max( self , (r2 - a + 1) * (i - b + 1) );
    }
    
    self = max( self , get( r1 + 1 , r2 ) );
    self = max( self , get( r1 , r2 - 1 ) );
    
    return self;
}

void solve(){
    for( int i = 1 ; i <= N ; i++ )
        for( int j = 1 ; j <= M ; j++ ){
            dp[i][j] = dp[i-1][j] + dp[i][j-1] + m[i][j] - dp[i-1][j-1];
            eprintf("dp[%d][%d] = %d", i, j, dp[i][j]);
        }
    memset( best , -1 , sizeof( best ) );
    eprintf("hello");
    calc();
    for( int i = 0 ; i < Q ; i++ ){
        int a = query[i][0], b = query[i][1];
        printf("%d\n", get( a , b ));
        assert( check( a , b , get( a , b ) ) );
    }

}

int main(){
	//freopen( "standard.in" , "r" , stdin );
	///freopen( "standard.out" , "w" , stdout );
	
	read();
	///init();
	solve();
	
	return 0;
}