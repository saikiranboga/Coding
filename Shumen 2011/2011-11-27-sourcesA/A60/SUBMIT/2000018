/**
TASK: standard
LANG: C++
*/
#include <cstdio>
#include <cstring>
#include <cassert>
#include <cctype>
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <ext/hash_map>
#include <queue>
#include <string>
#define foreach( el , c ) for( typeof((c).begin()) el = (c).begin() ; el != (c).end() ; el++ )
#define eprintf( msg , ... ) //fprintf( stderr , "line %d(%s): " msg "\n" , __LINE__ , __FUNCTION__ , ##__VA_ARGS__ )

typedef long long ll;
typedef unsigned long long ull;

using namespace std;
using namespace __gnu_cxx;

const ll LLINF = 1LL << 60;
const int INF = 1 << 29;
const double EPS = 1e-9;

const int MAXN = 1 << 10;
const int MAXQ = 1 << 20;
const int MAXLEN = 1 << 26;

int N, M, Q;
int m[MAXN][MAXN];
int query[MAXQ][2];
int dp[MAXN][MAXN];
int best[MAXN][MAXN];
char __input[MAXLEN];
int __getp;

int help[MAXN];

inline char mygetc(){
    ///return getc( stdin );
    return __input[__getp++];
}

inline int getnextll(){
	char c = 0;
	while( !isdigit(c) )
		c = mygetc();
	int result = 0;
	do{
		result = 10 * result + ( c - '0' );
		c = mygetc();
	}while( isdigit( c ) );
	return result;
}

void read(){
    fread( __input , 1 , MAXLEN , stdin );
    //scanf("%d %d", &N, &M);
    N = getnextll();
    M = getnextll();
    for( int i = 1 ; i <= N ; i++ ){
        for( int j = 1 ; j <= M ; j++ ){
            //scanf("%d", &m[i][j]);
            m[i][j] = getnextll();
        }
    }
    //scanf("%d", &Q);
    Q = getnextll();
    for( int i = 0 ; i < Q ; i++ ){
        //scanf("%d %d", &query[i][0], &query[i][1]);
        query[i][0] = getnextll();
        query[i][1] = getnextll();
    }
}

inline bool cool( int xi , int yi , int xj , int yj ){
    return dp[xi][yi] - dp[xi][yj-1] - dp[xj-1][yi] + dp[xj-1][yj-1] == 0;
}

int get( int r1 , int r2 ){
    if( r1 > r2 )
        return -INF;
    int &self = best[r1][r2];
    
    if( self != -1 )
        return self;
    
    self = 0;
    
    int cur = 0, mybest = -INF;
    
    for( int i = 1 ; i <= M+1 ; i++ ){
        if( cool( r2 , i , r1 , i ) == 0 or i == M + 1 )
            mybest = max( mybest , cur ), cur = 0;
        else
            cur += r2 - r1 + 1;
    }
    
    self = mybest;
    
    self = max( self , get( r1 + 1 , r2 ) );
    self = max( self , get( r1 , r2 - 1 ) );
    
    return self;
}

void solve(){
    for( int i = 1 ; i <= N ; i++ )
        for( int j = 1 ; j <= M ; j++ ){
            dp[i][j] = dp[i-1][j] + dp[i][j-1] + m[i][j] - dp[i-1][j-1];
            eprintf("dp[%d][%d] = %d", i, j, dp[i][j]);
        }
    memset( best , -1 , sizeof( best ) );
    for( int i = 0 ; i < Q ; i++ ){
        int a = query[i][0], b = query[i][1];
        printf("%d\n", get( a , b ));
    }
}

int main(){
	///freopen( "standard.in" , "r" , stdin );
	///freopen( "standard.out" , "w" , stdout );
	
	read();
	///init();
	solve();
	
	return 0;
}