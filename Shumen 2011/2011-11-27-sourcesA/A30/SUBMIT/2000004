#include <cstdio>
#include <algorithm>

using namespace std;

const int MaxN = ( 1 << 20 );

int n, m;
int v[ MaxN ];
int s[ MaxN ];


int calc( int x ) {
 if( x == 0 ) return 0;
 int h = s[x-1];
 int lo, mi, hi;
 lo = 0; hi = h;
 while( lo < hi ){
    int mi = ( lo+hi ) >> 1;
    if( v[x-h+mi] >= v[x] ) lo = mi+1;
    else hi = mi;
 }

 return h-lo;
}

int T[ MaxN<<1 ];
int B[ MaxN ];

void update( int x, int l, int r, int p ){
 if( l > p || r < p ) return;
 if( l == p && r == p ){
  T[x] = B[p];
  return;
 }
 int mid = ( l+r ) >> 1;
 update( x*2, l, mid, p ); update( x*2+1, mid+1, r, p );
 T[x] = max( T[x*2], T[x*2+1] );
}

void build( int x, int l, int r ){
 if( l == r ){ T[x] = B[l]; return; }
 int mid = ( l+r ) >> 1;
 build( x*2, l, mid ); build( x*2+1, mid+1, r );
 T[x] = max( T[x*2], T[x*2+1] );
}

int main( void ) {
 scanf( "%d%d", &n, &m );

 for( int i = 0; i < n; ++i ) scanf( "%d", &v[i] );
 s[0] = 1;
 for( int i = 1; i < n; ++i ) if( v[i] <= v[i-1] ) s[i] = s[i-1]+1; else s[i] = 1;

 int ans = 0;
 for( int i = 0; i < n; ++i ) ans = max( ans, B[i] = calc( i ) );
 build( 1, 0, n-1 );

 for( int i = 0; i < m; ++i ) {
  int x; scanf( "%d", &x );

  if( x == 0 ) printf( "%d\n", T[1] );
  else{
    int a = x-1; int b = x;
    int sa, sb; sa = sb = 0;
    if( v[a] == v[b] ) continue;
    for( int j = b+1; j < n && v[j] <= v[j-1]; ++j ) s[j] -= s[b];

    if( v[a] < v[b] ){
     if( v[a-1] < v[b] ){ s[a] = 1; s[b] = 2; }
     else ++s[b];
    }
    else{
     s[b] = 1;
    }

    swap( v[a], v[b] );

    for( int j = a; j <= b; ++j ){ B[i] = calc( i ); update( 1, 0, n-1, i ); }

    int j;
    for( j = b+1; j < n && v[j] <= v[j-1]; ++j ) s[j] += s[b];
    B[j] = calc( j ); update( 1, 0, n-1, j );
  }

 }

 return 0;
}
