#include <stdio.h>
#include <math.h>

#include <algorithm>

using namespace std;

struct point
{
    double x, y, d;
    double c1, d1, c2, d2;

    bool operator< (const point &p) const
    {
        return d < p.d;
    }
};

int n, m;
point v[1005], p[1005];

int dx[] = {0, 1, 1, 1, 0, -1, -1, -1, 0};
int dy[] = {1, 1, 0, -1, -1, -1, 0, 1, 0};

double dist (point a, point b)
{
    return sqrt ((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
}

void recalc ()
{
    double d1min, d2min, d;
    int i, j, c1j, c2j;

    for (i = 1; i <= m; i ++)
        p[i].d = 0;
    for (i = 1; i <= n; i ++)
    {
        d1min = d2min = d = 1000000000;
        for (j = 1; j <= m; j ++)
        {
            d = dist (v[i], p[j]);
            if (d < d1min)
            {
                d2min = d1min;
                c2j = c1j;
                d1min = d;
                c1j = j;
            }
            else if (d < d2min)
            {
                d2min = d;
                c2j = j;
            }
        }

        v[i].d1 = d1min;
        v[i].c1 = c1j;
        v[i].d2 = d2min;
        v[i].c2 = c2j;
        p[c1j].d += d1min;
    }
}

void rez ()
{
    int i, j, ind = 0, lim = n / m, nr = 0, nr2 = n % m;
    if (nr2 != 0)
        lim ++;
    for (i = 1; i <= n; i += lim)
    {
        if (ind == nr2 && nr2)
            lim --;
        nr = 0;
        ind ++;
        p[ind].x = p[ind].y = 0;
        for (j = i; j < i + lim && j <= n; j ++)
        {
            p[ind].x += v[j].x;
            p[ind].y += v[j].y;
            nr ++;
        }
        p[ind].x /= nr;
        p[ind].y /= nr;
        p[ind].d = 0;
    }
}

double calc (int ind, point p)
{
    int i, j;
    double d, sol = 0;

    for (i = 1; i <= n; i ++)
    {
        d = dist (p, v[i]);

        if (v[i].c1 == ind)
        {
            if (v[i].d2 < d)
                sol += v[i].d2;
            else
                sol += d;
        }
        else if (v[i].d1 < d)
            sol += v[i].d1;
        else
            sol += d;
    }
    return sol;
}

void rez2 ()
{
    int i, j, k, cj;
    double dxy, d, dmin;
    point cp;

    for (i = 1; i <= m; i ++)
    {
        recalc ();
        dxy = 1000;
        dmin = 1000000000;
        for (k = 1; k <= 20; k ++)
        {
            for (j = 0; j < 9; j ++)
            {
                cp.x = p[i].x + dxy * dx[j];
                cp.y = p[i].y + dxy * dy[j];
                d = calc (i, cp);
                if (d < dmin)
                {
                    dmin = d;
                    cj = j;
                }
            }
            p[i].x += dxy * dx[cj];
            p[i].y += dxy * dy[cj];
            dxy *= 0.5;
        }
    }
}

int main ()
{
//    freopen ("clustering.in", "r", stdin);
//    freopen ("clustering.out", "w", stdout);

    scanf ("%d %d", &n, &m);

    int i;

    for (i = 1; i <= n; i ++)
        scanf ("%lf %lf", &v[i].x, &v[i].y);

    point p0;
    p0.x = p0.y = 0;
    for (i = 1; i <= n; i ++)
        v[i].d = dist (p0, v[i]) + v[i].x + v[i].y;

    sort (v + 1, v + n + 1);

    rez ();
    rez2 ();

    double sol = 0;
    for (i = 1; i <= m; i ++)
    {
        printf ("%.6lf %.6lf\n", p[i].x, p[i].y);
        sol += p[i].d;
    }
    //printf ("%lf\n", sol);
    /*
    p[1].x = 1.75;
    p[1].y = 3.25;
    p[2].x = 5.0;
    p[2].y = 5.0;

    recalc ();

    sol = 0;
    for (i = 1; i <= m; i ++)
        sol += p[i].d;
    printf ("%lf\n", sol);
    */

    return 0;
}
