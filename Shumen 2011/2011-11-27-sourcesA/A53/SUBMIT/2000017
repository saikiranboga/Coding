#include <cstdio>
#include <iostream>

using namespace std;

int N;
int M;

int a[1024][1024];
int sum[1024][1024];
int d[1024][1024];
int u[1024][1024];
int l[1024][1024];
int r[1024][1024];

void scan(){
  scanf ( "%d%d", &N, &M );
  
  for ( int i = 1; i <= N; ++i )
    for ( int j = 1; j <= M; ++j )
      scanf ( "%d", a[i] + j );
}

int ret_sum ( int x1, int y1, int x2, int y2 ){
  for ( int i = x1; i <= x2; ++i )
    for ( int j = y1; j <= y2; ++j )
      if ( a[i][j] ) return 1;
  return 0;
  
}

int left ( int x, int y, int down, int up ){
  int l = 0, r = y;
  down = x; up = x;
  
  while ( !a[down][y] ) --down;
  ++down;
  while ( !a[up][y] ) ++ up;
  --up;
  
  /*
  while ( l + 1 < r ){
    int mid = ( l + r ) / 2;
    
    if ( ret_sum ( down, mid, up, y ) ) l = mid;
    else r = mid;
  }
  */
  while ( ret_sum ( down, l, up, y ) ) ++l;
  return l;
}

int right ( int x, int y, int down, int up ){
  int l = y, r = M + 1;
  
  while ( !a[down][y] ) --down;
  ++down;
  while ( !a[up][y] ) ++ up;
  --up;
  //while ( l + 1 < r ){
  //  int mid = ( l + r ) / 2;
  //  
  //  if ( ret_sum ( down, y, up, mid ) ) r = mid;
   // else l = mid;
 // }
  
  while ( ret_sum ( down, y, up, r ) ) --r;
  
  return r;
}


void solve(){
  for ( int i = 0; i <= N + 1; ++i )
    a[i][0] = a[i][M + 1] = 1;
  
  for ( int j = 0; j <= M + 1; ++j )
    a[0][j] = a[N + 1][j] = 1;
  
  for ( int i = 0; i <= N + 1; ++i )
    for ( int j = 0; j <= M + 1; ++j )
      if ( i == 0 && j == 0 )
	 sum[i][j] = a[i][j];
      else
	if ( i == 0 )
	  sum[i][j] = sum[i][j - 1] + a[i][j];
      else
	if ( j == 0 )
	  sum[i][j] = sum[i - 1][j] + a[i][j];
      else
	sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + a[i][j];
   
  

  
  for ( int i = 0; i <= N + 1; ++i )
    for ( int j = 0; j <= M + 1; ++j )
      if ( a[i][j] == 1 ) d[i][j] = i + 1;
      else d[i][j] = d[i - 1][j];
      
  for ( int i = N + 1; i >= 0; --i )
    for ( int j = M + 1; j >= 0; --j )
      if ( a[i][j] )
	u[i][j] = i - 1;
      else u[i][j] = u[i + 1][j];
    
   /*
  for ( int i = 1; i <= N; ++i )
    for ( int j = 1; j <= M; ++j )
      if ( !a[i][j] ){
      l[i][j] = left ( i, j, d[i][j], u[i][j]
      );
      r[i][j] = right ( i, j, d[i][j], u[i][j] );
    }*/
    
   
   int Q;
  
  scanf ( "%d", &Q );
  
  for ( int i = 0; i < Q; ++i ){
    int x, y;
    
    scanf ( "%d%d", &x, &y );
    
    int mx = 0, xx = x;
    
    for ( int p = x; p <= y; ++ p )
      for ( int j = 1; j <= M; ++j )
	if ( !a[p][j] ){
	//  cout << x << " " << j << " " << r[x][j] << " " << l[x][j] << " " << u[x][j] << " " << d[x][j] << endl;
	int up = min ( y, u[p][j] ), down = max ( x, d[p][j] );
	int le = left ( p, j, down, up ), ri = right ( p, j, down, up );
	//cout << p << " " << j << " " << up << " " << down << " " << le << " " << ri << endl;
      
	 mx = max ( mx, ( up - down + 1 ) * ( ri - le + 1 ) );
	}
    printf ( "%d\n", mx );
    
  }
}

int main(){
  scan();
  solve();
}