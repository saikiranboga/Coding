#include <cstdio>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
using namespace std;

const int Maxn=1<<21;

int n,m;

int niz[Maxn];

map<int,int> M;

struct loga{
    vector<int> niz; int s;
    loga(){}
    loga(int n){niz.resize(n,0); s=n;}
    //void clear(){niz.clear(); niz.resize(ss,0);}
    void update(int p, int x){
        for (;p<s;p+=p&-p)niz[p]+=x;
    }
    int sum(int x, int y=1){
        int ret=0;
        for (--y;y;y^=y&-y)ret-=niz[y];
        for (;x;x^=x&-x)ret+=niz[x];
        return ret;
    }

};

int V[1000006*20];

bool cmp(int x, int y){
    return x>y;
}

int main(void){
    scanf("%d%d", &n, &m);

    for (int i=0;i<n;++i){
        scanf("%d", niz+i);
        M[niz[i]]=i;
    }int __x=0;
    for (map<int,int>::iterator it=M.begin();it!=M.end();++it,++__x){niz[it->second]=__x+1;}
    //for (int i=0;i<n;++i)printf("%d ", niz[i]); puts("");
    int x,last=0,maxi=0,sol,size=0,bio=0;
    for (int i=0;i<m;++i){
        scanf("%d", &x); --x;
        if (x==-1){
            if (bio){printf("%d\n", maxi);}
            bio=1;
            V[size++]=1<<30;
            V[size++]=niz[0];
            maxi=0;
            for (int j=1;j<n;++j){
                if (niz[j]<niz[j-1])V[size++]=niz[j];
                else {
                    sol=V+size-lower_bound(V+last,V+size,niz[j],cmp);
                    //printf("//%d %d\n", *lower_bound(V+last,V+size,niz[j],cmp), j);
                    maxi=max(maxi,sol);
                    last=size;
                }
            }
            printf("%d\n", maxi);
        }
        else {swap(niz[x], niz[x+1]); bio=0;}
    }
    return 0;
}
