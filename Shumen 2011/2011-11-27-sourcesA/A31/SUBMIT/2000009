#include <cstdio>
#include <algorithm>
#include <cstring>
using namespace std;
const int Maxn=1020;
int n,m,k;
#include <cassert>


int maxi;

struct bitset{
    int niz[35];
    bitset(){memset(niz,0,sizeof niz);}
    bitset& operator |= (const int x){
        int poz=x/30,mod=x%30;
        niz[poz]|=1<<mod;
    }
    friend bitset operator | (const bitset& x, const bitset& y){
        bitset ret;
        for (int i=0;i<maxi;++i)ret.niz[i]=x.niz[i]|y.niz[i];
        return ret;
    }
};

bitset niz[Maxn];
bitset mat[Maxn][Maxn]; //od i-tog do j-tog retka;
int sol[Maxn][Maxn]; //od i-tog do j-tog retka;

char bio[Maxn][Maxn];

bitset getmat(int x, int y){
    if (x==y)return mat[x][y]=niz[x];
    if (bio[x][y])return mat[x][y];
    bio[x][y]=1;
    return mat[x][y]=getmat(x+1,y)|niz[x];
}


struct fast_oc{
    fast_oc(){}
    fast_oc(int x){best=kraj=poc=x;}
    int best, kraj,poc;
    friend fast_oc spoji(fast_oc x, fast_oc y){ // x JE LIJEVI!!!!!
        fast_oc ret;
        ret.kraj=y.kraj;
        ret.poc=x.poc;
        ret.best=max(max(x.best,y.best),x.kraj+y.poc);
        return ret;
    }
    bool operator == (const fast_oc& x)const{
        return best==x.best && kraj==x.kraj && poc==x.poc;
    }
}BRZI[(1<<16)+13],NULA(0);

void init(void){
    for (int a=0;a<(1<<16);++a){
        int cnt=0,best=0,koraka=0,kraj=0,bio=0;
        int x=a;
        while(x){
            ++koraka;
            if (x&1){
                bio=1;
                best=max(cnt,best);
                cnt=0;
            }
            else {
                if (!bio)++kraj;
                ++cnt;
            }
            x>>=1;
        }
        best=max(best,15-koraka);
        BRZI[a].best=best;
        BRZI[a].poc=15-koraka;
        if (!kraj && !bio)BRZI[a].kraj=15;
        else BRZI[a].kraj=kraj;
    }
}

fast_oc nadji(int x, int y){
    int cnt=0,best=0,koraka=0,kraj=0,bio=0;
    while(x){
        ++koraka;
        if (x&1){
            bio=1;
            best=max(cnt,best);
            cnt=0;
        }
        else {
            if (!bio)++kraj;
            ++cnt;
        }
        x>>=1;
    }
    best=max(best,y-koraka);
    fast_oc ret;
    ret.best=best;
    ret.poc=y-koraka;
    if (!kraj && !bio)ret.kraj=y;
    else ret.kraj=kraj;
    return ret;
}
int __Q;
int ocijeni(bitset a){
    fast_oc ret(0),now;
    int x,y;
    for (int i=0;i<maxi;++i){
        now=fast_oc(0);
        x=a.niz[i]>>15;
        //printf("%d: %d %d %d\n",x, BRZI[x].poc, BRZI[x].best, BRZI[x].kraj);
        y=a.niz[i]%(1<<15);
        //printf("%d: %d %d %d\n",y, BRZI[y].poc, BRZI[y].best, BRZI[y].kraj);
        //printf("sad ce: %d %d\n", x ,y);
        assert(((x<<15)^y)==a.niz[i]);


        if (i==maxi-1){
            //puts("uso");
            now=spoji(nadji(x,max(0,__Q-15)),nadji(y,min(15,__Q)));
            //printf("__%d %d %d", now.poc, now. best, now.kraj);

        }
        else now=spoji(BRZI[x],BRZI[y]);


        if (ret==NULA)ret=now;
        else ret=spoji(now,ret);

        //printf(":: %d %d\n", i, ret.poc);

    }
    return ret.best;
}

int getsol(int x, int y){
    //printf("uso u sol: %d %d\n", x, y);
    if (bio[x][y]==2)return sol[x][y];
    //puts("proso bio");
    bio[x][y]=2;
    if (x==y)return sol[x][y]=ocijeni(mat[x][x]);
    sol[x][y]=ocijeni(mat[x][y])*(y-x+1);
    sol[x][y]=max(sol[x][y],getsol(x+1,y));
    sol[x][y]=max(sol[x][y],getsol(x,y-1));
    return sol[x][y];
}

int main(void){
    init();

    scanf("%d%d", &n, &m);
    maxi=(m-1)/30+1;
    __Q=m%30;
    for (int i=0;i<n;++i){
        int x=0;
        for (int j=m-1;j>=0;--j){
            scanf("%d", &x);
            if (x)
                niz[i]|=j;
        }
    }
    for (int j=0;j<n;++j)
        getmat(0,j);
    getsol(0,n-1);


    scanf("%d", &k);
    for (int i=0;i<k;++i){
        int x,y;
        scanf("%d%d", &x, &y);
        printf("%d\n", sol[x-1][y-1]);
    }


    return 0;
}
