#include<cstdio>
#include<algorithm>
#include<cstring>
#define MAXN 1024
#define MAXV 3000010
using namespace std;
int a[MAXN],tree[MAXV],ans[MAXN],mx=-1,n,m;
bool done[MAXN];

int query(int pos)
{
    int ans=0;
    while(pos>0)
    {
        ans+=tree[pos];
        pos-=pos&(-pos);
    }
    return ans;
}

void update(int pos,int v)
{
    while(pos<=MAXV)
    {
        tree[pos]+=v;
        pos+=pos&(-pos);
    }
    return;
}
/*
void bigger_gen()
{
    bigger[0]=-1;
    int i,k;
    for(i=2;i<n;i++)
    {
        if(a[i-2]<a[i-1]) { bigger[i]=i-1; continue; }
        k=bigger[i-1];
    }
}*/

void generate()
{
    memset(tree,0,sizeof(tree));
    memset(done,0,sizeof(done));
    mx=-1;
    int i,j;
    for(i=0;i<n;i++)
    {
        ans[i]=query(a[i]-1);
       // printf("found %d before %d\n",ans[i],a[i]);
        for(j=0;j<i;j++)
            if(a[i]>=a[j]&&!done[j]) { done[j]=1; update(a[j],-1); }
        update(a[i],1);
        done[i]=0;
        if(ans[i]>mx) mx=ans[i];
        //printf("query now %d total now %d\n",query(a[i]),query(MAXV-1));
    }
}

int main()
{
    int i,k;
    scanf("%d%d",&n,&m);
    for(i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
        a[i]++;
    }
    bool generated=0;
    for(i=0;i<m;i++)
    {
        scanf("%d",&k);
        if(k==0)
        {
            if(!generated) { generate(); generated=1; }
            printf("%d\n",mx);
            continue;
        }
        swap(a[k],a[k-1]);
        generated=0;
    }
    return 0;
}
