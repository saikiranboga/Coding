#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <cmath>

using namespace std;

const int N = 1001;
const int K = 101;

struct point{
    float x;
    float y;
    int sef;
};

int n, k;
point v[N];
bool dj[N];
int mem[K];
int bs[N];
point sum[N];
float dt;
point best[N];

void Test()
{
    freopen("clustering.in", "r", stdin);
    freopen("clustering.out", "w", stdout);
}

void Read()
{
    cin >> n >> k;

    for (int i = 1; i <= n; ++i)
        cin >> v[i].x >> v[i].y;
}

int cmp1(point a, point b)
{
    if (a.x == b.x)
        return (a.y < b.y);
    return (a.x < b.x);
}

int cmp2(point a, point b)
{
    if (a.y == b.y)
        return (a.x < b.x);
    return (a.y < b.y);
}

float dist(int i, int j)
{
    return abs(v[i].x - sum[j].x) + abs(v[i].y - sum[j].y);
}

void SortByX()
{
    sort(v+1, v+n+1, cmp1);

    int dlf = 0;
    for (int i = 1; i < n; i += (n/k))
    {
        ++dlf;
        for (int j = i; j < i + (n/k) && j <= n; ++j)
        {
            ++mem[dlf];
            sum[dlf].x += v[j].x;
            sum[dlf].y += v[j].y;
            v[j].sef = dlf;
        }
        sum[dlf].x /= mem[dlf];
        sum[dlf].y /= mem[dlf];
    }

    dt = 0;
    for (int i = 1; i <= n; ++i)
    {
        float dta = dist(i, v[i].sef);
        if (dta > dt)
            dt = dta;
    }
    memcpy(best, sum, sizeof(sum));
}

void SortByY()
{
    sort(v+1, v+n+1, cmp2);
    memset(sum, 0, sizeof(sum));
    memset(mem, 0, sizeof(mem));

    int dlf = 0;
    for (int i = 1; i < n; i += (n/k))
    {
        ++dlf;
        for (int j = i; j < i + (n/k) && j <= n; ++j)
        {
            ++mem[dlf];
            sum[dlf].x += v[j].x;
            sum[dlf].y += v[j].y;
            v[j].sef = dlf;
        }
        sum[dlf].x /= mem[dlf];
        sum[dlf].y /= mem[dlf];
    }

    int dta = 0;
    for (int i = 1; i <= n; ++i)
    {
        float dtl = dist(i, v[i].sef);
        if (dtl > dta)
            dta = dtl;
    }
    if (dta < dt)
    {
        dt = dta;
        memcpy(best, sum, sizeof(sum));
    }
}

float dist2(int i, int j)
{
    return abs(v[i].x - v[j].x) + abs(v[i].y - v[j].y);
}

void SetBosses()
{
    int lf = k;
    memset(dj, 0, sizeof(dj));
    memset(mem, 0, sizeof(mem));

    while (lf)
    {
        int x = rand()%n + 1;
        if (!dj[x])
        {
            lf--;
            bs[k-lf] = x;
            dj[x] = 1;
            sum[k-lf].x = 0;
            sum[k-lf].y = 0;
        }
    }

    for (int i = 1; i <= n; ++i)
    {
        int mn = k+1;
        float smin = 10000;
        for (int j = 1; j <= k; ++j)
        {
            float dta = dist2(i, bs[j]);
            if (dta < smin)
            {
                smin = dta;
                mn = j;
            }
        }
        v[i].sef = mn;
        sum[mn].x += v[i].x;
        sum[mn].y += v[i].y;
        ++mem[mn];
    }

    for (int i = 1; i <= k; ++i)
    {
        sum[i].x /= mem[i];
        sum[i].y /= mem[i];
    }

    float dta = 0;
    for (int i = 1; i <= n; ++i)
    {
        float dtl = dist2(i, bs[v[i].sef]);
        if (dtl > dta)
            dta = dtl;
    }

    if (dta < dt)
    {
        dt = dta;
        memcpy(best, sum, sizeof(sum));
    }
}

void SolveRandomly()
{
    SetBosses();
}

void Solves()
{
    SortByX();
    SortByY();

    srand(time(0));
    for (int i = 1; i < 100; ++i)
        SolveRandomly();
}

void OutBest()
{
    for (int i = 1; i <= k; ++i)
        printf("%6f %6f\n", sum[i].x, sum[i].y);
}

int main()
{
    //Test();

    Read();
    Solves();
    OutBest();

    return 0;
}
